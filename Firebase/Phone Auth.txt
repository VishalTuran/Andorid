1) Connect firebase to project and phone number as a signin method in console.

2) Get the mobile no. from the user.

3) Below are the method that help the phone authentication.


private void sendVerificationCode(String mobile)
    {
        //CountDownTimer constructor takes two parameter.First is the total time for which counter will work
        //Second is the time by which the main time will decrease.
        new CountDownTimer(60000,1000) {
            @Override
            public void onTick(long l) {
                resendCode.setText(""+l/1000);
                resendCode.setEnabled(false);
            }

            @Override
            public void onFinish() {
                resendCode.setText("Resend Code");
                resendCode.setEnabled(true);
            }
        }.start();
        
	PhoneAuthProvider.getInstance().verifyPhoneNumber("+91"+mobile,60,TimeUnit.SECONDS,TaskExecutors.MAIN_THREAD,mCallbacks);
	//First parameter is the mobile No.
	//Second parameter is the timeout time.
	//Third parameter is the unit of timeout.
	//Fourth parameter is the where the task should be executed
	//Fifth parameter is the Callback once the otp is send.
    }

Now we need to create the Callback.

 private PhoneAuthProvider.OnVerificationStateChangedCallbacks mCallbacks=new PhoneAuthProvider.OnVerificationStateChangedCallbacks() {
        @Override
        public void onVerificationCompleted(PhoneAuthCredential phoneAuthCredential) {
            //Getting the code sent by SMS
            String code=phoneAuthCredential.getSmsCode();

            //sometime the code is not detected automtically
            //in this case the code will be null
            //so user has to manually enter the code

            if(code!=null)
            {
                otpNumber.setText(code);
                verifyVerificationCode(code);
            }
        }

        @Override
        public void onVerificationFailed(FirebaseException e) {
            Toast.makeText(OtpVerificationActivity.this,e.getMessage(),Toast.LENGTH_SHORT).show();

        }

        @Override
        public void onCodeSent(String s, PhoneAuthProvider.ForceResendingToken forceResendingToken) {
            super.onCodeSent(s, forceResendingToken);

            //storing the verification id that is sent to the user
            //it will automatically be created when the code is sent.
            mVerificationId=s;
        }
    };

 private void verifyVerificationCode(String code)
    {
        //creating the credentials
        PhoneAuthCredential credential=PhoneAuthProvider.getCredential(mVerificationId,code);

        //signin the user
        signInWithPhoneAuthCrediental(credential);
    }

 private void signInWithPhoneAuthCrediental(PhoneAuthCredential credential) {
        mAuth.signInWithCredential(credential)
                .addOnCompleteListener(OtpVerificationActivity.this, new OnCompleteListener<AuthResult>() {
                    @Override
                    public void onComplete(@NonNull Task<AuthResult> task) {
                        if(task.isSuccessful()){
                            //verification is Successful
                            Intent intent=new Intent(OtpVerificationActivity.this,MainActivity.class);
                            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK|Intent.FLAG_ACTIVITY_CLEAR_TASK);
                            startActivity(intent);
                        }
                        else
                        {
                            //verification Unsuccessful

                            String message="Something is wrong,we will fix it soon....";
                            if(task.getException() instanceof FirebaseAuthInvalidCredentialsException){
                                message="Invalid code entered";
                            }

                            Toast.makeText(OtpVerificationActivity.this,message,Toast.LENGTH_SHORT).show();
                        }
                    }
                });
    }





